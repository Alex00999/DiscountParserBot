import asyncio
import re

from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from database import DataBase

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from telethon import TelegramClient, events
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart

from dotenv import load_dotenv
import os

load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
print(api_id, api_hash)
client = TelegramClient('telethon_parser.session', api_id, api_hash)

bot = Bot(token=os.getenv("AIOGRAM_BOT_TOKEN"), default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()
db = DataBase()


def keywords_in_string(keywords, string):
    search_string = string.lower()
    keywords = set(keyword.lower() for keyword in keywords)
    pattern = re.compile('|'.join(re.escape(keyword) for keyword in keywords))
    matches = pattern.findall(search_string)
    return bool(matches)


async def start_telethon():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Telethon –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤.
    """
    await client.start()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @client.on(events.NewMessage())
    async def handler(event):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        chat_title = ''
        if event.chat and hasattr(event.chat, 'title'):
            chat_title = event.chat.title

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ "Telegram"
        if chat_title == 'Telegram':
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞

        if event.message.peer_id and hasattr(event.message.peer_id, 'channel_id'):
            channel_id = event.message.peer_id.channel_id
            message_id = event.message.id
            message_text = event.message.message
            formatted_message_text = message_text + f'\n\n<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:</b> https://t.me/c/{channel_id}/{message_id}'
            print(f"–ù–æ–≤—ã–π –ø–æ—Å—Ç: {message_text}")
            print(db.get_users())
            for user_id, user_filter in db.get_users():
                print(keywords_in_string(user_filter.split(), message_text))
                if keywords_in_string(user_filter.split(), message_text):
                    if event.message.media:
                        try:
                            await event.message.download_media('temp.jpg')
                            await bot.send_photo(chat_id=user_id, photo=FSInputFile('temp.jpg'),
                                                 caption=formatted_message_text)
                            os.remove('temp.jpg')
                        except:
                            await bot.send_message(chat_id=user_id, text=formatted_message_text)
                    else:
                        await bot.send_message(chat_id=user_id, text=formatted_message_text)

    print("# –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    await client.run_until_disconnected()


async def start_aiogram():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Aiogram –±–æ—Ç–∞ –∏ –µ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä.
    """

    async def send_welcome(message: types.Message):
        await message.answer(
            "<b>–®–∞–ª–æ–º! ‚ú°Ô∏è \n \n–≠—Ç–æ –±–æ—Ç-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞ –ó–∞–ø–∏—Å–∫–∏ –ï–≤—Ä–µ—è."
            " –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±–æ—Ç –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∏ <u>–≤–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</u>."
            "</b>\n \n/filter - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞")

    dp.message.register(send_welcome, CommandStart())

    print("# –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


@dp.message(Command("filter"))
async def filter_command(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä üìù', callback_data='change_filter_button')],
        [InlineKeyboardButton(text='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ üö´', callback_data='unsubscribe_button')]
    ])
    current_filter = db.get_user_filter(message.from_user.id)
    if not current_filter:
        current_filter = '–Ω–µ –∑–∞–¥–∞–Ω'
    await message.answer(text='<b>–¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä:</b> ' + current_filter,
                         reply_markup=keyboard)


class Form(StatesGroup):
    user_filter = State()


@dp.callback_query(lambda c: c.data == 'change_filter_button')
async def process_callback_button_click(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä, –ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 150 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü—Ä–∏–º–µ—Ä:</b> 4070 —á–∞–π–Ω–∏–∫ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –ø—ã–ª–µ—Å–æ—Å\n",
    )
    await state.set_state(Form.user_filter.state)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == 'unsubscribe_button')
async def process_unsubscribe_button_click(callback_query: types.CallbackQuery):
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏! üôÅ",
    )
    db.add_user(callback_query.from_user.id, '')
    await callback_query.answer()


@dp.message(Form.user_filter)
async def process_name(message: types.Message, state: FSMContext):
    new_user_filter = message.text[0:150]
    db.add_user(message.chat.id, new_user_filter)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä üìù', callback_data='change_filter_button')],
        [InlineKeyboardButton(text='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ üö´', callback_data='unsubscribe_button')]
    ])
    await message.answer(
        text='<b>–¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä:</b> ' + new_user_filter,
        reply_markup=keyboard
    )
    await state.clear()


async def main():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞ (Telethon –∏ Aiogram) –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
    """
    await asyncio.gather(start_telethon(), start_aiogram())


if __name__ == '__main__':
    asyncio.run(main())
